Q)
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length
_____________________________________________________________________________________________________

class Solution {
    public int longestOnes(int[] nums, int k) {
        int zero = 0, ans = 0, n = nums.length;
        //zero: Variable to keep track of the count of zeros in the current window.
        //ans: Variable to store the length of the longest subarray with at most k zeros.
        //n: Length of the input array nums.
        //i and j represent the start and end of the current window.
        //n=10
        for(int i= 0, j = 0; j < n; j++) {
            if(nums[j] == 0) {
                while(zero >= k && i <= j) {
                    if(nums[i] == 0) {
                        zero--;
                    }
                    i++;
                }
                zero++;//1
            }
            ans = Math.max(ans, j-i+1);
        }
        return ans;
    }
}