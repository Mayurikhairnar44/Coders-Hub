Given a string s, find the length of the longest 
substring
 without repeating characters.
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.*;
class Solution {
    public int lengthOfLongestSubstring(String s) {
 if(s==null ||s.length()==0)
     return 0;
HashMap<Character,Integer> charIndexMap=new HashMap<Character,Integer>();
int maxLength=0;int start =0;
for(int end=0;end<s.length();end++)
{
	char currentChar=s.charAt(end);
	if(charIndexMap.containsKey(currentChar))
	{
		start=Math.max(charIndexMap.get(currentChar)+1,start);
	}
	charIndexMap.put(currentChar, end);
	maxLength=Math.max(maxLength,end-start+1);
}
return maxLength;
 }       
     public static void main(String args[])
    {
        Solution sol=new Solution();
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the string");
        String str=sc.nextLine();
        System.out.println("The length of longsest substring wihtout repeating chracter is"+sol.lengthOfLongestSubstring(str));
    }
}