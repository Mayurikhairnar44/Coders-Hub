import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static int minimumNumber(int n, String password) {
    // Return the minimum number of characters to make the password strong
    
    int additionsNeeded = 0;
    
        if (!containsDigit(password)) {
            additionsNeeded++;
        }
        if (!containsLowercase(password)) {
            additionsNeeded++;
        }
        if (!containsUppercase(password)) {
            additionsNeeded++;
        }
        if (!containsSpecialCharacter(password)) {
            additionsNeeded++;
        }
        int lengthDifference = 6 - password.length();
        
        if (lengthDifference > 0 && lengthDifference > additionsNeeded) {
            additionsNeeded = lengthDifference;
        }

        return additionsNeeded;
        
    }
    
    static boolean containsDigit(String s) {
        for (char c : s.toCharArray()) {
            if (Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean containsLowercase(String s) {
        for (char c : s.toCharArray()) {
            if (Character.isLowerCase(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean containsUppercase(String s) {
        for (char c : s.toCharArray()) {
            if (Character.isUpperCase(c)) {
                return true;
            }
        }
        return false;
    }

    static boolean containsSpecialCharacter(String s) {
        String specialCharacters = "!@#$%^&*()-+";
        for (char c : s.toCharArray()) {
            if (specialCharacters.contains(String.valueOf(c))) {
                return true;
            }
        }
        return false;
    }
     

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
